=======================
|FEATURE|\ の最適化設定
=======================

この文書では、\ |FEATURE|\ のバッチアプリケーション実行時の最適化設定について説明します。

設定方法
========

|FEATURE|\ のバッチアプリケーション実行時の設定は、 `設定ファイル`_ を使う方法と `環境変数`_ を使う方法があります。

設定ファイル
------------

|FEATURE|\ に関するバッチアプリケーション実行時のパラメータは、 :file:`$ASAKUSA_HOME/m3bp/conf/m3bp.properties` に記述します。
このファイルは、\ |FEATURE| Gradle Pluginを有効にしてデプロイメントアーカイブを作成した場合にのみ含まれています。

このファイルに設定した内容は\ |FEATURE|\ のバッチアプリケーションの設定として使用され、バッチアプリケーション実行時の動作に影響を与えます。

設定ファイルはJavaのプロパティファイルのフォーマットと同様です。以下は ``m3bp.properties`` の設定例です。

**m3bp.properties**

..  code-block:: properties

    ## the max number of worker threads
    com.asakusafw.m3bp.thread.max=10

    ## the default number of partitions
    com.asakusafw.m3bp.partitions=10

.. _ASAKUSA_M3BP_ARGS:

環境変数
--------

|FEATURE|\ に関するバッチアプリケーション実行時のパラメータは、環境変数 ``ASAKUSA_M3BP_ARGS`` に設定することもできます。

環境変数 ``ASAKUSA_M3BP_ARGS`` の値には ``--engine-conf <key>=<value>`` という形式でパラメータを設定します。

以下は環境変数の設定例です。

..  code-block:: sh
    
    export ASAKUSA_M3BP_ARGS='--engine-conf com.asakusafw.m3bp.thread.max=10'

設定ファイルと環境変数で同じプロパティが設定されていた場合、環境変数の設定値が利用されます。

..  hint::
    環境変数による設定は、バッチアプリケーションごとに設定を変更したい場合に便利です。
    
..  attention::
    :program:`yaess-batch.sh` などのYAESSコマンドを実行する環境と、\ |FEATURE|\ を実行する環境が異なる場合（例えばYAESSのSSH機能を利用している場合）に、
    YAESSコマンドを実行する環境の環境変数が\ |FEATURE|\ を実行する環境に受け渡されないことがある点に注意してください。
    
    YAESSではYAESSコマンドを実行する環境の環境変数をYAESSのジョブ実行先に受け渡すための機能がいくつか用意されているので、それらの機能を利用することを推奨します。
    詳しくは :asakusafw:`YAESSユーザーガイド <yaess/user-guide.html>` などを参照してください。

.. _optimization_properties:

設定項目
========

|FEATURE|\ のバッチアプリケーション実行時の設定項目は以下の通りです。

``com.asakusafw.m3bp.thread.max``
  タスクを実行するワーカースレッドの最大数を設定します。

  未設定の場合、利用可能な全てのCPUコアに対して一つずつワーカースレッドを割り当てます。

  既定値: (論理コア数)

  ..  hint::
      |FEATURE|\ ではこの値をCPUコア数より極端に大きな値にすると性能が低下する場合があります。
      計算ノードのCPUを占有できる環境では既定値を利用し、そうでない場合には既定値よりも小さな値を設定するとよいでしょう。

      また、物理CPUコアに対して複数のスレッド(論理CPUコア)が存在する環境では、物理CPUコア数を設定した方が速くなるようなケースもあります。

``com.asakusafw.m3bp.thread.affinity``
  各ワーカースレッドへのCPUコアの割り当て方法を設定します。

  * ``none``

    * 特別な設定を行わず、OSによるCPUコアの割り当てを利用します

  * ``compact``

    * ワーカースレッドをCPUコアに割り当てる際に、同一ソケット上のコアから順番に割り当てていきます

  * ``scatter``

    * ワーカースレッドをCPUコアに割り当てる際に、異なるソケットのコアを順番に割り当てていきます

  既定値: ``none``

  ..  attention::
      この設定を有効(``none``\ 以外)にした場合、\ |FEATURE|\ はハードウェアの情報を参照します。
      仮想環境などでCPUコアの情報を正しく取得できない場合にはあまり効果がありません。

      また、環境によっては\ ``none``\ 以外を指定した際にエラーとなる場合があります。

``com.asakusafw.m3bp.partitions``
  scatter-gather操作(シャッフル操作)のパーティション数を設定します。

  既定値: (論理コア数の8倍)

  ..  hint::
      この値はDAG上の各vertexの「タスク数」に大きな影響を与えます。
      基本的にscatter-gather操作の直後のvertexでは、パーティションごとにタスクが割り当てられて処理を行うため、上記パーティション数が少なすぎるとワーカースレッドに適切にタスクが行き渡りません。

      また、ワーカースレッド数と同程度のパーティション数を指定した場合、各パーティションの大きさに偏り (キーの偏り) があるとワーカースレッドへタスクを均等に割り当てられなくなります。

      多くの場合は、ワーカースレッド数の数倍を指定するのがよいでしょう。

``com.asakusafw.m3bp.output.buffer.size``
  個々の出力バッファのサイズをバイト数で設定します。

  既定値: ``4194304`` (``4MB``)

  ..  hint::
      このバッファサイズは大きくしすぎると余計にメモリを消費し、小さくしすぎるとバッファを書き出す回数が増えて性能が低下する場合があります。

``com.asakusafw.m3bp.output.buffer.records``
  個々の出力バッファの最大レコード数を設定します。

  既定値: ``524288``

  ..  hint::
      それぞれの出力バッファでは、ここで指定したレコード数が上限に達するか、または出力バッファの使用量がある閾値を超えるか、どちらかで出力バッファの内容を書き出しています。
      そのため、ここのレコード数を極端に小さな値に設定した場合、出力バッファに余裕があってもバッファの内容を頻繁に書き出してしまうことになります。

      また、上記レコード数に応じてレコードのメタ情報を保持するため、極端に大きな値を指定すると余計にメモリを消費することになります。

      個々のレコードが極端に小さかったり大きかったりすることが明らかな場合以外、この値を変更する必要はありません。

``com.asakusafw.m3bp.output.buffer.flush``
  個々の出力バッファの内容を書き出す際の閾値となる使用量の割合を指定します。

  この値には ``0.0`` から ``1.0`` までの値を指定できますが、実装によってはこれより狭い範囲の値に再設定される場合があります。

  既定値: ``0.8``

  ..  hint::
      それぞれの出力バッファでは、ここで指定したレコード数が上限に達するか、または出力バッファの使用量がある閾値を超えるか、どちらかで出力バッファの内容を書き出しています。
      そのため、ここの使用率の閾値に対して極端に小さな値に設定した場合、出力バッファに余裕があってもバッファの内容を頻繁に書き出してしまうことになります。

      また、それぞれのレコードの(シリアライズ後の)サイズは、「 ``バッファサイズ * (1.0 - 使用率の閾値)`` 」以下である必要があります。
      これを超えた場合、レコードがバッファに収まらなくなって正常に動作しない場合があります。

      個々のレコードが極端に小さかったり大きかったりすることが明らかな場合以外、この値を変更する必要はありません。

``com.asakusafw.m3bp.buffer.access``

  個々の入出力バッファのアクセス方式を設定します。

  * ``nio``

    * JavaのNIOを利用してバッファにアクセスします。

  * ``unsafe``

    * Javaの非推奨の方法を利用してバッファにアクセスします。

  既定値: ``nio`` (Java NIOを利用)

  ..  attention::
      現在の実装では、本設定に ``nio`` を指定した際に以下の状況でエラーになります。

      * :asakusafw:`演算子の性能特性 <dsl/operators.html>` が ``CoGroup``, ``Join``, ``Fold`` のいずれかで、個々のグループのシリアライズ後の容量が2GBを超える場合
      * :asakusafw:`Direct I/O <directio/index.html>` の出力で、個々のグループ(各ファイル)のシリアライズ後の容量が2GBを超える場合 (出力ファイル名のパターンにワイルドカードを指定している場合にはこの制約はありません)

      このエラーが発生すると、「input group is too large; please use larger addressing mode instead」という主旨のログが表示されます。

      本設定に ``unsafe`` を指定することで、このデータサイズの制限を解除できます。


``hadoop.<name>``
  指定の ``<name>`` を名前に持つHadoopの設定を追加します。

  |FEATURE|\ では、一部の機能 (Direct I/Oなど) にHadoopのライブラリ群を利用しています。
  このライブラリ群がHadoopの設定を参照している場合、この項目を利用して設定値を変更できます。

  Asakusa全体に関するHadoopの設定は ``$ASAKUSA_HOME/core/conf/asakusa-resources.xml`` 内で行えますが、
  同一の項目に対する設定が ``asakusa-resources.xml`` と ``hadoop.<name>`` の両方に存在する場合、後者の設定値を優先します。

  ..  hint::
      |FEATURE|\ に組み込まれたHadoopライブラリ群を利用する場合、システムにインストールされたHadoopの設定ファイルは利用されず、各Hadoopの既定値を利用します。
      このような場合、この設定項目を利用してHadoopの設定を上書きしてください。

      また、システムにインストールされたHadoopを利用する場合にも、\ |FEATURE|\ 利用時のみ異なる設定を行うには、ここで指定するのがよいでしょう。


..  _ASAKUSA_M3BP_OPTS:

Java VMの設定
=============

|FEATURE|\ でバッチアプリケーションを実行する際には、Java VMをひとつ起動してそのプロセス内で\ |ENGINE|\ やAsakusaの演算子を実行します。

このとき、対象のJava VMを起動する際のオプション引数を、環境変数 ``ASAKUSA_M3BP_OPTS`` で指定できます。

以下は環境変数の設定例です。

..  code-block:: sh

    export ASAKUSA_M3BP_OPTS='-Xmx16g'

上記のように書いた場合、Open JDKなどでJavaのヒープ領域の最大置を ``16GB`` に設定できます。
